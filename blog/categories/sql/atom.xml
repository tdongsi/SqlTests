<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sql | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/SqlTests/blog/categories/sql/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/SqlTests/"/>
  <updated>2021-07-14T11:56:26-07:00</updated>
  <id>http://tdongsi.github.io/SqlTests/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vertica SQL: Splitting String]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2018/08/06/vertica-sql-splitting-string/"/>
    <updated>2018-08-06T12:27:12-07:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2018/08/06/vertica-sql-splitting-string</id>
    <content type="html"><![CDATA[<p>It is not so straight-forward for splitting strings in SQL, including but not limited to comma-separated strings.</p>

<!--more-->


<p>In Python and Java, splitting delimited strings is straight forward.</p>

<pre><code class="plain">// Python
"EMS_Tax,PSCare,Tools_Team,,workflow".split()

// Java: using Guava's Splitter
</code></pre>

<p>As shown in <a href="http://tdongsi.github.io/blog/2016/08/17/analytic-functions-in-mysql/">another blog post</a>, not all SQL dialects are equal.
Different database systems have different ways of doing so in SQL, as shown in the following links (1, 2)</p>

<p><a href="http://stackoverflow.com/questions/2647/how-do-i-split-a-string-so-i-can-access-item-x">http://stackoverflow.com/questions/2647/how-do-i-split-a-string-so-i-can-access-item-x</a></p>

<p><a href="http://stackoverflow.com/questions/10581772/how-to-split-a-comma-separated-value-to-columns">http://stackoverflow.com/questions/10581772/how-to-split-a-comma-separated-value-to-columns</a></p>

<p>This post will throws another into that mess.</p>

<pre><code class="sql Spitting comma-separated strings">SELECT
label_key,
SPLIT_PART(labels, ',', row_num) AS Label
FROM
(SELECT ROW_NUMBER() OVER () AS row_num FROM tables) row_nums
JOIN label_map i
WHERE SPLIT_PART(labels, ',', row_num) &lt;&gt; '';
</code></pre>

<h3>Original</h3>

<pre><code class="sql Example data">INSERT INTO helper_jira_key (dm_jira_key,labels) VALUES (415862,'EMS_Tax,YE2016,getwell,locals_manual,noncritical,ye_taxopsmh');
INSERT INTO helper_jira_key (dm_jira_key,labels) VALUES (436631,'BBC_Reviewed,SPS_Bugs,Priority_Backlog,need_followup');
INSERT INTO helper_jira_key (dm_jira_key,labels) VALUES (443409,'EMS_Tax,PSCare,Tools_Team,,workflow');
INSERT INTO helper_jira_key (dm_jira_key,labels) VALUES (490209,null);
INSERT INTO helper_jira_key (dm_jira_key,labels) VALUES (490210,'');
</code></pre>

<pre><code class="sql String splitting code">SELECT
jmap.dm_jira_key,
SPLIT_PART(labels, ',', row_num) AS Label
FROM
(SELECT ROW_NUMBER() OVER () AS row_num FROM tables) row_nums
CROSS JOIN stg_all_jira_issues_vw i
INNER JOIN helper_jira_key jmap ON i.jira_id = jmap.jira_id AND i.source_system_key = jmap.source_system_key
WHERE SPLIT_PART(labels, ',', row_num) &lt;&gt; '';
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Questions: SQL Basics]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2018/08/02/select-basics/"/>
    <updated>2018-08-02T01:39:37-07:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2018/08/02/select-basics</id>
    <content type="html"><![CDATA[<p>This post is about basic DDL, <code>SELECT</code> questions (phone-screen level).</p>

<!--more-->


<h3>Questions</h3>

<pre><code class="plain Given Department schema for Questions 1-3">employees                             projects
+---------------+---------+           +---------------+---------+
| id            | int     |&lt;----+  +-&gt;| id            | int     |
| first_name    | varchar |     |  |  | title         | varchar |
| last_name     | varchar |     |  |  | start_date    | date    |
| salary        | int     |     |  |  | end_date      | date    |
| department_id | int     |--+  |  |  | budget        | int     |
+---------------+---------+  |  |  |  +---------------+---------+
                             |  |  |
departments                  |  |  |  employees_projects
+---------------+---------+  |  |  |  +---------------+---------+
| id            | int     |&lt;-+  |  +--| project_id    | int     |
| name          | varchar |     +-----| employee_id   | int     |
+---------------+---------+           +---------------+---------+
</code></pre>

<h4>Question 1</h4>

<pre><code class="plain Question 1">Write a query to list the departments that have a total combined salary greater than $40,000.

Expected Output:
+-------------+----------------+
| name        | combined_salary|
+-------------+----------------+
| Engineering |        130000  |
| Marketing   |         50000  |
+-------------+----------------+
</code></pre>

<h4>Question 2</h4>

<pre><code class="plain Question 2">List the current projects and employees assigned to them.

Output:
+------------+-----------+--------------------------+
| first_name | last_name | title                    |
+------------+-----------+--------------------------+
| John       | Smith     | Update TPS Reports       |
| Ava        | Muffinson | Design 3 New Silly Walks |
| Cailin     | Ninson    | Build a cool site        |
| Mike       | Peterson  | Build a cool site        |
| Ian        | Peterson  | Build a cool site        |
+------------+-----------+--------------------------+
</code></pre>

<h4>Question 3</h4>

<pre><code class="plain Question 3">Who's the highest paid person per department?

Output:
+------------+-----------+-------------+--------+
| first_name | last_name | name        | salary |
+------------+-----------+-------------+--------+
| John       | Smith     | Reporting   |  20000 |
| Ian        | Peterson  | Engineering |  80000 |
| John       | Mills     | Marketing   |  50000 |
| Ava        | Muffinson | Silly Walks |  10000 |
+------------+-----------+-------------+--------+
</code></pre>

<h4>Question 4</h4>

<pre><code class="plain Given fact_sales table">create table fact_sales (
  dateid date not null,
  fruit varchar(10),
  sold int
);

insert into fact_sales
values(STR_TO_DATE('2015-01-01', '%Y-%m-%d'), 'Apple', 31); 
insert into fact_sales
values(STR_TO_DATE('2015-01-01', '%Y-%m-%d'), 'Orange', 19); 
insert into fact_sales
values(STR_TO_DATE('2015-01-02', '%Y-%m-%d'), 'Apple', 37); 
insert into fact_sales
values(STR_TO_DATE('2015-01-02', '%Y-%m-%d'), 'Orange', 26); 
insert into fact_sales
values(STR_TO_DATE('2015-01-03', '%Y-%m-%d'), 'Apple', 21); 
insert into fact_sales
values(STR_TO_DATE('2015-01-03', '%Y-%m-%d'), 'Orange', 23); 
insert into fact_sales
values(STR_TO_DATE('2015-01-04', '%Y-%m-%d'), 'Apple', 35); 
insert into fact_sales
values(STR_TO_DATE('2015-01-04', '%Y-%m-%d'), 'Orange', 27);

fact_sales
+------------+--------+------+
| dateid     | fruit  | sold |
+------------+--------+------+
| 2015-01-01 | Apple  |   31 |
| 2015-01-01 | Orange |   19 |
| 2015-01-02 | Apple  |   37 |
| 2015-01-02 | Orange |   26 |
| 2015-01-03 | Apple  |   21 |
| 2015-01-03 | Orange |   23 |
| 2015-01-04 | Apple  |   35 |
| 2015-01-04 | Orange |   27 |
+------------+--------+------+
</code></pre>

<pre><code class="plain Question 4">What is the difference between Apples and Oranges sold each day?

Output:
+------------+------+
| dateid     | sold |
+------------+------+
| 2015-01-01 |   12 |
| 2015-01-02 |   11 |
| 2015-01-03 |   -2 |
| 2015-01-04 |    8 |
+------------+------+
</code></pre>

<h4>Question 5</h4>

<pre><code class="plain Given schema">fct_request
+------------+------------+---------------+
| dateid     | sender_uid | recipient_uid |
+------------+------------+---------------+
| 2015-01-01 |          1 |             2 |
| 2015-01-01 |          1 |             4 |
| 2015-01-02 |          3 |             1 |
| 2015-01-03 |          4 |             5 |
+------------+------------+---------------+

fct_accept
+------------+--------------+------------+
| dateid     | accepter_uid | sender_uid |
+------------+--------------+------------+
| 2015-01-01 |            2 |          1 |
| 2015-01-02 |            4 |          1 |
| 2015-01-02 |            1 |          3 |
+------------+--------------+------------+

Rules:
1. You can only send a friend request to a person one time.
2. You cannot send a friend request to someone who has already sent you a friend request.
</code></pre>

<pre><code class="plain Question 5">What percent of friend requests are accepted?
Data might be not perfect.
</code></pre>

<h4>Question 6</h4>

<p>Create DDL (table and foreign keys) for several tables in a provided ERD.
ERD contains at least one many to many relationship.
For example: Player(personID, school) and Team(teamID, name).
Player and Team will have a many to many relationship.</p>

<h4>Question 7</h4>

<p>This question is a bit advanced.</p>

<p>You have a table where you have <code>date</code>, <code>user_id</code>, <code>song_id</code> and <code>count</code>.
It shows at the end of each day how many times in her history a user has listened to a given song.
So count is cumulative sum.
You have to update this on a daily basis based on a second table that records in real time when a user listens to a given song.
Basically, at the end of each day, you go to this second table and pull a count of each user/song combination and then add this count to the first table that has the lifetime count.
If it is the first time a user has listened to a given song, you won&rsquo;t have this pair in the lifetime table, so you have to create the pair there and then add the count of the last day.</p>

<p>For simplicity, assume the tables are fact_event: (date, user_id, song_id) and snapshot: (date, user_id, song_id, count).</p>

<h3>Answers</h3>

<h4>Question 1</h4>

<p>The sandbox uses MySQL which does not support WITH clause.
See more MySQL workaround in <a href="/blog/2016/08/28/mysql-workaround/">here</a>.</p>

<pre><code class="sql Answer 1">WITH dept_total AS (
select department_id, sum(salary) as total
from employees
group by department_id
having total &gt; 40000
)
select d.name, t.total
from dept_total t
join deparments d on t.department_id = d.id
</code></pre>

<pre><code class="sql MySQL Answer 1">select d.name, t.total
from (
  select department_id, sum(salary) as total
from employees
group by department_id
having total &gt; 40000
  ) t
  join departments d ON t.department_id = d.id
</code></pre>

<h4>Question 2</h4>

<pre><code class="sql Answer 2">select e.first_name, e.last_name, p.title
from employees_projects ep
join employees e on ep.employee_id = e.id
join projects p on ep.project_id = p.id;
</code></pre>

<h4>Question 3</h4>

<p>Again, the sandbox is MySQL and <code>dense_rank</code> is not available.</p>

<pre><code class="sql Answer 3">select e.first_name, e.last_name, d.name, e.salary
FROM employees e
JOIN departments d on e.department_id = d.id
WHERE (e.department_id, e.salary) in
(
select department_id, max(salary) AS salary
from employees
group by department_id
)
</code></pre>

<h4>Question 4</h4>

<p>You can self-join the table to get the following answer.</p>

<pre><code class="sql Naive answer">select orange.dateid, apple.sold - orange.sold
from fact_sales orange
join fact_sales apple on orange.dateid = apple.dateid
and orange.fruit = 'Orange' and apple.fruit = 'Apple';
</code></pre>

<p>However, recall that in dimensional modeling, fact tables usually have huge number of rows.
Therefore, the expected answer should avoid joining such a huge table.</p>

<pre><code class="sql Expected answer">select dateid, sum(mod_sold)
from (
select dateid, case when fruit = 'Apple'  then sold else -sold end as mod_sold
from fact_sales
) t
group by dateid;
</code></pre>

<h4>Question 5</h4>

<pre><code class="sql Answer 5">select count(requested), sum(accepted)
FROM (
select r.sender_uid as requested, CASE when a.sender_uid is null then 0 else 1 end as accepted
from fct_request r
left join fct_accept a on r.sender_uid = a.sender_uid and r.recipient_uid = a.accepter_uid
) t
</code></pre>

<h4>Question 6</h4>

<p>You should create a <code>teamPlayer</code> table with foreign keys to <code>Team</code> and <code>Player</code> tables as primary key.
You are expected to write the following DDL statements.</p>

<pre><code class="sql DDL for teamPlayer">CREATE TABLE teamPlayer
(
playerID INT NOT NULL, 
teamID INT NOT NULL,
PRIMARY KEY(playerID, teamID)
);

alter table teamPlayer
add constraint 
  fk_teamPlayer__Player foreign key(playerID) references Player(personID);

alter table teamPlayer
add constraint 
  fk_teamPlayer__Team foreign key(teamID) references Team(teamID);
</code></pre>

<h4>Question 7</h4>

<p><strong>Scenario 1</strong>: Overwrite the snapshot. Date column in snapshot is the last modified date.</p>

<pre><code>create temporary table temp
AS
(select user_id, song_id, count(*)
from fact_event
where date &gt; (select max(date) from snapshot)
group by user_id, song_id
);

UPDATE snapshot as s
SET date = current_date, s.count = s.count + t.count
FROM temp t
WHERE s.user_id = t.user_id AND s.song_id = t.song_id;

--- (MySQL: UPDATE might be different)

INSERT snapshot (date, user_id, song_id, count)
SELECT current_date, user_id, song_id, count
from temp
where (user_id, song_id) not in (select user_id, song_id from snapshot) x;
</code></pre>

<p><strong>Scenario 2</strong>: Append new snapshot for each date.</p>

<pre><code class="sql">create temporary table temp
AS
(select user_id, song_id, count(*)
from fact_event
where date &gt; (select max(date) from snapshot)
group by user_id, song_id
);

insert into snapshot (date, user_id, song_id, count)
select current_date, t.user_id, t.song_id, t.count + coalesce(s.count, 0)
from temp t
join snapshot s on t.user_id = s.user_id and t.song_id = s.song_id and s.date = current_date-1;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: MySQL Workarounds]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2018/08/01/mysql-workaround/"/>
    <updated>2018-08-01T01:42:23-07:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2018/08/01/mysql-workaround</id>
    <content type="html"><![CDATA[<p>MySQL has traditionally lagged behind in support for the SQL standard.
Unfortunately, from my experience, MySQL is often used as the sandbox for SQL code challenges and interviews.
If you are used to work with Vertica SQL, writing SQL statements in MySQL can be challenging exercises, NOT necessarily in a good way, because many useful features are not supported.</p>

<!--more-->


<h3>Summary</h3>

<p>In this post, the following interview questions will be presented and, then, potential pitfalls and answers in MySQL will be explained:</p>

<ol>
<li><a href="https://leetcode.com/problems/department-top-three-salaries/">Question</a>: Write a SQL query to find employees who earn the top three salaries in each of the department.</li>
<li><a href="https://leetcode.com/problems/nth-highest-salary/">Question</a>: Write a function that return the given <code>n</code>-th highest salary.</li>
<li><a href="https://leetcode.com/problems/rank-scores/">Question</a>: Write a SQL query to rank scores (dense_rank).</li>
<li><a href="https://leetcode.com/problems/delete-duplicate-emails/">Question</a>: Write a SQL query to delete all duplicate email entries in a table named <code>Person</code>, keeping only unique emails based on its smallest Id.</li>
</ol>


<h3>WITH clause</h3>

<p>Use <a href="http://tdongsi.github.io/blog/2016/08/17/analytic-functions-in-mysql/">nested subqueries</a>.</p>

<p><a href="https://leetcode.com/problems/department-top-three-salaries/">Question</a>:
Write a SQL query to find employees who earn the top three salaries in each of the department.</p>

<pre><code class="sql What you might come up">WITH temp AS (
select Name, Salary, DepartmentId
rank() OVER (partition by DepartmentId ORDER BY salary DESC) as rank
)
select d.Name as Department, e.Name as Name, e.Salary as Salary
from temp e
join Department d on e.DepartmentId = d.Id
where t.rank &lt;= 3
</code></pre>

<p>Answer: based on <a href="http://stackoverflow.com/questions/17084123/mysql-query-to-get-the-top-two-salary-from-each-department%0AFor%20ideas%20to%20arrive%20at%20the%20solution">this</a>.</p>

<pre><code class="sql What actually works">select d.Name as Department, e.Name as Employee, e.Salary as Salary
from Employee e
join Department d on e.DepartmentId = d.Id
where (
select count(distinct(e2.salary))
from Employee e2
where e.DepartmentId = e2.DepartmentId and e2.salary &gt; e.salary
) in (0,1,2)
order by Department, Salary desc
</code></pre>

<p>Using the similar idea, one can answer this <a href="https://leetcode.com/problems/nth-highest-salary/">question</a>:
write a function that return the given <code>n</code>-th highest salary. The solution (without using <code>DENSE_RANK</code>) is:</p>

<pre><code class="sql What actually works">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  RETURN (
      -- Write your MySQL query statement below.
      SELECT MAX(Salary)
            FROM Employee Emp1
            WHERE (N-1) = (
                 SELECT COUNT(DISTINCT(Emp2.Salary))
                        FROM Employee Emp2
                        WHERE Emp2.Salary &gt; Emp1.Salary)
  );
END
</code></pre>

<h3>Analytic functions <code>ROW_NUMBER</code>, <code>RANK</code>, and <code>DENSE_RANK</code></h3>

<p>Summary from <a href="http://tdongsi.github.io/blog/2016/08/17/analytic-functions-in-mysql/">here</a>.</p>

<pre><code class="sql ROW_NUMBER, RANK, and DENSE_RANK functions in MySQL">-- In Vertica
SELECT
ROW_NUMBER () OVER (PARTITION BY col_1, col_2 ORDER BY col_3 DESC) AS row_number,
RANK () OVER (PARTITION BY col_1, col_2 ORDER BY col_3 DESC) AS rank,
DENSE_RANK () OVER (PARTITION BY col_1, col_2 ORDER BY col_3 DESC) AS dense_rank,
t.*
FROM table_1 t

-- In MySQL
SELECT
@row_num:=IF(@prev_col_1=t.col_1 AND @prev_col_2=t.col_2, @row_num+1, 1) AS row_number,
@rank:=IF(@prev_col_1=t.col_1 AND @prev_col_2=t.col_2 AND @prev_col_3=col_3, @rank, @row_num) AS rank,
@dense:=IF(@prev_col_1=t.col_1 AND @prev_col_2=t.col_2, IF(@prev_col_3=col_3, @dense, @dense+1), 1) AS dense_rank,
@prev_col_1 = t.col_1,
@prev_col_2 = t.col_2,
@prev_col_3 = t.col_3,
t.*
FROM (SELECT * FROM table_1 ORDER BY col_1, col_2, col_3 DESC) t,
     (SELECT @row_num:=1, @dense:=1, @rank:=1, @prev_col_1:=NULL, @prev_col_2:=NULL, @prev_col_3:=NULL) var
</code></pre>

<p>In the following <a href="https://leetcode.com/problems/rank-scores/">question</a>, note that the outer SELECT is used to only expose only columns of interest while the main SQL code is enclosed in a subquery:</p>

<pre><code class="sql Solution in Vertica SQL">select Score,
DENSE_RANK() OVER (ORDER BY Score DESC) AS Rank
FROM Scores;
</code></pre>

<pre><code class="sql Solution in MySQL">SELECT Score, Rank FROM
( SELECT t.Score,
@dense:=IF(@prev_col2=t.Score, @dense, @dense+1) AS Rank,
@prev_col2:=t.Score
FROM (SELECT Score FROM Scores ORDER BY Score DESC) t,
(SELECT @dense:=0, @prev_col2:=NULL) var ) x
</code></pre>

<h3>Other tricky questions</h3>

<p><code>DELETE</code> might not work as you think in MySQL.</p>

<p><a href="https://leetcode.com/problems/delete-duplicate-emails/">Question</a>:
Write a SQL query to delete all duplicate email entries in a table named <code>Person</code>, keeping only unique emails based on its smallest Id.</p>

<pre><code class="sql What you might come up">delete from Person
where Id not in (select min(Id) from Person group by Email);
</code></pre>

<p>The above does not work because you need to assign name to the subquery (temporary table).</p>

<pre><code class="sql What actually works">delete from Person
where Id not in
(select * from
(select min(Id) from Person group by Email) x);
</code></pre>

<h3>External links</h3>

<ul>
<li><a href="https://github.com/kamyu104/LeetCode/tree/master/MySQL">Leetcode Database Solutions</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
