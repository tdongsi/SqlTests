<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Network | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/SqlTests/blog/categories/network/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/SqlTests/"/>
  <updated>2018-01-16T22:53:16-08:00</updated>
  <id>http://tdongsi.github.io/SqlTests/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reserved IP Addresses]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2016/09/02/reserved-ip-addresses/"/>
    <updated>2016-09-02T20:22:02-07:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2016/09/02/reserved-ip-addresses</id>
    <content type="html"><![CDATA[<p>Various IP addresses are reserved for special purposes.
It is good to recognize if two containers are communicating using their private channels based on their IPs.</p>

<!--more-->


<h3>IP v4</h3>

<p>Broadcast address: an address where all host bits in the IP address are set to one (1).
All hosts are to accept and respond to the broadcast address.</p>

<p>The 127.0.0.0/8 class &lsquo;A&rsquo; subnet is used for special local addresses, most commonly the loopback address 127.0.0.1.</p>

<p><strong>Private IP addresses</strong>: a number of IP blocks which were set aside by ARIN for use as private addresses on private networks that are not directly connected to the Internet.</p>

<pre><code class="plain Private IP addresses">Class   CIDR            Start       End
A       10.0.0.0/8      10.0.0.0    10.255.255.255
B       172.16.0.0/12   172.16.0.0  172.31.255.255
C       192.168.0.0/16  192.168.0.0 192.168.255.255
</code></pre>

<p><strong>Special purposes</strong>: There are a number of addresses that are set aside for special purposes, such as the IP&rsquo;s used in OSPF, Multicast, and experimental purposes that cannot be used on the Internet.</p>

<pre><code class="plain Reserved for multicast">Class   CIDR            Start       End
D       224.0.0.0/4     224.0.0.0   239.255.255.255
</code></pre>

<p><strong>Others</strong>:</p>

<pre><code>Address Block   CIDR Mask   Used for                                Reference
0.0.0.0         /8          Used to communicate with "This" network RFC1700, p. 4
10.0.0.0        /8          Private-Use Networks                    RFC 1918
14.0.0.0        /8          Public-Data Network                     RFC1700, p.181
24.0.0.0        /8          Cable TV Networks                       --
127.0.0.0       /8          Loopback address
</code></pre>

<h3>IP v6</h3>

<pre><code class="plain Important adress blocks">Address block (CIDR)    Range                   Number of addresses Scope       Purpose
::/128                  ::                      1                   Software    Unspecified address
::1/128                 ::1                     1                   Host        Loopback address to the local host.
::ffff:0:0/96           ::ffff:0.0.0.0 –
                        ::ffff:255.255.255.255  2^32                Software    IPv4 mapped addresses
</code></pre>

<h3>References</h3>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Reserved_IP_addresses">Wiki page</a></li>
<li><a href="http://www.inetdaemon.com/tutorials/internet/ip/addresses/special.shtml">Easier to read</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network Question Bank]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2016/09/01/network-question-bank/"/>
    <updated>2016-09-01T01:45:07-07:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2016/09/01/network-question-bank</id>
    <content type="html"><![CDATA[<p>Brush up on networking theory, including familiarity with major components of the IP suite.</p>

<!--more-->


<h3>Review Syllabus</h3>

<p>See <a href="/syllabus/">main syllabus</a>.</p>

<h3>Questions</h3>

<ol>
<li>TCP/UDP and how they&rsquo;re used.</li>
<li>Difference between IPv4 &amp; IPv6.</li>
<li>How DNS works.</li>
<li>HTTP and it&rsquo;s various versions.</li>
<li>Basic understanding of SSL/TLS.</li>
<li>Other application protocols (FTP, IMAP, SSH etc.)</li>
<li>What is REST and how it&rsquo;s used.</li>
</ol>


<p>On the practical side, make sure you&rsquo;re very comfortable with the networking stack of your language or framework of choice.</p>

<ol>
<li>Make calls to an external web service.</li>
<li>Handle errors and different response codes.</li>
<li>Be able to serialize/deserialize data.</li>
<li>Know async concepts.</li>
<li>Accept user inputs and handle XSS attacks.</li>
<li>Web - how do you keep information in a web application - cookie vs session</li>
<li>What is GET and POST - differences</li>
<li>Difference between PUT and POST.</li>
</ol>


<h3>Answers</h3>

<h4>Section A</h4>

<p>(1) See more <a href="http://www.howtogeek.com/190014/htg-explains-what-is-the-difference-between-tcp-and-udp/">here</a>.
Both TCP and UDP are protocols used for sending packets over Internet.
Built on top of Internet Protocol (IP). The packets are sent to an IP address.</p>

<p>TCP: Transmission Control Protocol</p>

<ol>
<li>Two ways: the remote system sends packets back to acknowledge it’s received your packets.</li>
<li>TCP guarantees the recipient will receive the packets in order by numbering them.</li>
<li>TCP is about reliability: if ACK is not received, the sender will send packets again.</li>
<li>Example usage: file download, web.</li>
</ol>


<p>UDP: User Datagram Protocol</p>

<ol>
<li>Just send the packets to receiver. No waiting for ACK.</li>
<li>No guarantee: if receivers don’t receive it, too bad.</li>
<li>No error checking for better performance.</li>
<li>Example usage: game, live video stream.</li>
</ol>


<h4>Section B</h4>

<p>(3) See more <a href="http://stackoverflow.com/questions/107390/whats-the-difference-between-a-post-and-a-put-http-request">here</a>.</p>

<p>PUT is idempotent: multiple PUT requests will have the same effect. POST is not.
To give examples of REST-style resources:
&ldquo;POST /books&rdquo; with a bunch of book information might create a new book, and respond with the new URL identifying that book: &ldquo;/books/5&rdquo;.
&ldquo;PUT /books/5&rdquo; would have to either create a new book with the id of 5, or replace the existing book with ID 5.</p>

<p>In non-resource style, POST can be used for just about anything that has a side effect. One other difference is that PUT should be idempotent - multiple PUTs of the same data to the same URL should be fine, wheras multiple POSTs might create multiple objects or whatever it is your POST action does.</p>
]]></content>
  </entry>
  
</feed>
