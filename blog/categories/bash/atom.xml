<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bash | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/SqlTests/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/SqlTests/"/>
  <updated>2018-03-10T20:16:54-08:00</updated>
  <id>http://tdongsi.github.io/SqlTests/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bash Cookbook]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2022/12/03/bash-cookbook/"/>
    <updated>2022-12-03T00:31:51-08:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2022/12/03/bash-cookbook</id>
    <content type="html"><![CDATA[<p>All various tricky bash/Linux questions.</p>

<!--more-->


<h3>Remove files with special characters such as <code>-</code></h3>

<p>Sometimes, when you run a script accidentally, you might end up creating a file with special characters in its name, making deletion hard in conventional way. Some examples include <code>&gt; option[value='2016']</code> and <code>-myfile</code>.</p>

<p>Based on <a href="https://unix.stackexchange.com/questions/229348/how-to-remove-a-file-that-start-with-or-other-unusual-characters">this</a>, it is possible to remove those files by inode number.</p>

<pre><code class="plain">ls -i 
-&gt; 5233 &gt; option[value='2016']   5689 foo
find . -inum 5233 -print
find . -inum 5233 -delete
</code></pre>

<p>You can also use the <code>--</code> option according to <code>man</code>:</p>

<pre><code> The rm command uses getopt(3) to parse its arguments, which allows it to
 accept the `--' option which will cause it to stop processing flag options at
 that point.  This will allow the removal of file names that begin with a dash
 (`-').  For example:
       rm -- -filename
</code></pre>

<h3>Parameter expansion</h3>

<p>Explanation on <code>VARIABLE1="${VARIABLE1:-some_val}"</code> idiom.</p>

<pre><code>$ echo "$VAR1"

$ VAR1="${VAR1:-default value}"
$ echo "$VAR1"
default value
</code></pre>

<pre><code>$ VAR1="has value"
$ echo "$VAR1"
has value

$ VAR1="${VAR1:-default value}"
$ echo "$VAR1"
has value
</code></pre>

<p>Other common usage:</p>

<ul>
<li>Simple usage

<ul>
<li>$PARAMETER</li>
<li>${PARAMETER}</li>
</ul>
</li>
<li>Indirection

<ul>
<li>${!PARAMETER}</li>
</ul>
</li>
<li>Case modification

<ul>
<li>${PARAMETER^}: first character to upper case</li>
<li>${PARAMETER^^}: all characters to upper cases</li>
<li>${PARAMETER,}: first character to lower case</li>
<li>${PARAMETER,,}: all characters to lower cases</li>
<li>${PARAMETER~}: first character to reverse case</li>
<li>${PARAMETER~~}: all characters to reverse cases.</li>
</ul>
</li>
<li>Substring removal: useful for filename manipulation

<ul>
<li>${PARAMETER#PATTERN}: shortest text matching the pattern. E.g.: <code>${MYSTRING#* }</code></li>
<li>${PARAMETER##PATTERN}: longest text matching the pattern. E.g.: <code>${MYSTRING##* }</code></li>
<li>${PARAMETER%PATTERN}: shortest text fron the end</li>
<li>${PARAMETER%%PATTERN}: longest text from the end</li>
</ul>
</li>
</ul>


<p>Examples of substring removal:</p>

<ul>
<li>Get name without extension: <code>${FILENAME%.*}</code> where FILENAME=bash_hackers.txt</li>
<li>Get extension: <code>${FILENAME##*.}</code></li>
<li>Get directory name: <code>${PATHNAME%/*}</code> where PATHNAME=/home/bash/bash_hackers.txt</li>
<li>Get filename in path: <code>${PATHNAME##*/}</code></li>
</ul>


<p>Reference:</p>

<ul>
<li><a href="https://unix.stackexchange.com/questions/122845/using-a-b-for-variable-assignment-in-scripts/122878">Stack overflow</a></li>
<li><a href="http://wiki.bash-hackers.org/syntax/pe">Parameter expansion</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker CLI Cookbook]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2022/12/02/docker-cli-cookbook/"/>
    <updated>2022-12-02T09:20:53-08:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2022/12/02/docker-cli-cookbook</id>
    <content type="html"><![CDATA[<p>Standard Docker CLI commands for everyday workflow.</p>

<!--more-->


<h3>Standard workflow</h3>

<p>The usual workflow for modifying a Docker image is as follows:</p>

<pre><code class="plain Docker commands in workspace"># Build from a Docker file
$ docker build -t docker.registry.net/tdongsi/jenkins-nodev4-agent:2.85 .

# Test run a Jenkins slave docker
$ docker run -d --restart=always --entrypoint="java" docker.registry.net/tdongsi/jenkins-nodev4-agent:5 \
-jar /usr/share/jenkins/slave.jar -jnlpUrl http://10.252.78.115/computer/slave/slave-agent.jnlp

$ docker ps -a
$ docker exec -it &lt;ID&gt; bash

# Copy an installer to Docker image
$ docker cp jdk-8u131-linux-x64.tar.gz bad2dab451bf:/home/jenkins
$ docker exec -it bad2dab451bf bash
jenkins@aqueduct-agent-1c87a4933da26c:~$ ls
jdk-8u131-linux-x64.tar.gz  maven  support  workspace

# Stop and restart
$ docker stop &lt;ID&gt;
$ docker rm &lt;ID&gt;

$ docker commit --author tdongsi --message "Commit message" bad2dab451bf \ 
docker.registry.net/tdongsi/jenkins-nodev4-agent:7

$ docker push docker.registry.net/tdongsi/jenkins-nodev4-agent:7
</code></pre>

<pre><code class="plain Clean up"># One liner to stop / remove all of Docker containers:
docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)

# Remove Docker containers that exited
docker rm -v $(docker ps -aq -f status=exited)

# Remove dangling (untagged) images
docker rmi $(docker images -f "dangling=true" -q)
</code></pre>

<h3><code>kubectl</code> command</h3>

<p><code>kubectl</code> is the CLI client for Kubernetes.
It is very similar to <code>docker</code> CLI in many situations (see <a href="https://kubernetes.io/docs/reference/kubectl/docker-cli-to-kubectl/">this comparison</a>).</p>

<pre><code class="plain kubectl commands"># List all pods
kubectl get pods -a
# Long format: including node
kubectl get pods -o wide

# List pod name only
kubectl get pods -o name -a | awk -F "/" '{print $2}'

# Delete pod based on some filter (e.g., "java-agent" in name)
kubectl get pods -o name -a | awk -F "/" '{print $2}' | grep java-agent &gt;pods.txt
kubectl delete pod `&lt; pods.txt`
# The back tick is based on
# https://stackoverflow.com/questions/4227994/command-line-arguments-from-a-file-content
</code></pre>

<h3>Reference</h3>

<ul>
<li><a href="http://tdongsi.github.io/blog/2017/01/25/docker-root-user-in-a-pod/">Example of modifying Docker image</a></li>
<li><a href="https://kubernetes.io/docs/reference/kubectl/docker-cli-to-kubectl/">docker vs kubectl</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[User Group and Related Commands]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2022/12/01/groupadd-cookbook/"/>
    <updated>2022-12-01T18:21:32-08:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2022/12/01/groupadd-cookbook</id>
    <content type="html"><![CDATA[<p>User groups and commands to manipulate them.</p>

<!--more-->


<h3><code>groupadd</code> examples</h3>

<p>The following example creates a new group called apache</p>

<pre><code>$ groupadd apache
</code></pre>

<p>Make sure it is created successfully.</p>

<pre><code># grep apache /etc/group
apache:x:1004:
</code></pre>

<p>If you donâ€™t specify a groupid, Linux will assign one automatically.
If you want to create a group with a specific group id, do the following.</p>

<pre><code>$ groupadd apache -g 9090

$ grep 9090 /etc/group
apache:x:9090:
</code></pre>

<p>Group account information is stored in <code>/etc/group</code>.
Or you can run the following command to find out what groups you belong to.</p>

<pre><code class="plain Check user group">+ groups $USER

+ cat /etc/group
...
docker:x:999:jenkins
...
</code></pre>

<h3>References</h3>

<ul>
<li><a href="https://linux.die.net/man/8/groupadd">groupadd man pages</a></li>
<li><a href="http://linux.101hacks.com/unix/groupadd/">groupadd examples</a></li>
<li><a href="http://www.thegeekstuff.com/2012/06/chown-examples/">chown examples</a></li>
<li><a href="https://www.unixtutorial.org/2008/06/find-files-which-belong-to-a-user-or-unix-group/">find files with group name or ID</a></li>
<li><a href="https://unix.stackexchange.com/questions/33844/change-gid-of-a-specific-group">https://unix.stackexchange.com/questions/33844/change-gid-of-a-specific-group</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
