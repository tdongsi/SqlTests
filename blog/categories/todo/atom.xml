<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Todo | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/SqlTests/blog/categories/todo/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/SqlTests/"/>
  <updated>2021-07-14T10:28:59-07:00</updated>
  <id>http://tdongsi.github.io/SqlTests/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Questions: Operating System Drills]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2016/06/03/questions-operating-system-drills/"/>
    <updated>2016-06-03T00:42:41-07:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2016/06/03/questions-operating-system-drills</id>
    <content type="html"><![CDATA[<p>From &ldquo;Operating System concepts&rdquo; book.</p>

<!--more-->


<p>Drill:</p>

<ol>
<li>Chapter 1: Storage device hierarchy</li>
<li>Chapter 2: System calls and Linux examples. System boot.</li>
<li>Chapter 3: Process diagram. Process state diagram. Zombie, orphan process. Practice Exercise 3.1, 3.2.</li>
<li>Conditions of deadlock. How to avoid deadlocks.</li>
</ol>


<p>Links:</p>

<ul>
<li><a href="http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/">http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/</a></li>
<li><a href="http://duartes.org/gustavo/blog/post/how-the-kernel-manages-your-memory/">http://duartes.org/gustavo/blog/post/how-the-kernel-manages-your-memory/</a></li>
<li><a href="http://duartes.org/gustavo/blog/post/page-cache-the-affair-between-memory-and-files/">http://duartes.org/gustavo/blog/post/page-cache-the-affair-between-memory-and-files/</a></li>
</ul>


<p>Practice exercises:</p>

<ul>
<li><a href="http://codex.cs.yale.edu/avi/os-book/OS9/practice-exer-dir/index.html">http://codex.cs.yale.edu/avi/os-book/OS9/practice-exer-dir/index.html</a></li>
</ul>


<h3>Answers</h3>

<p>(4) How to avoid deadlocks based on conditions of deadlock:</p>

<ol>
<li>No pre-emption:</li>
<li>Hold and wait: Obtain all required resources at the beginning, no waiting -> many retries.</li>
<li>Circular wait: Reordering acquisition to avoid circular wait.</li>
<li>Mutual exclusion: Adding resources.</li>
</ol>

]]></content>
  </entry>
  
</feed>
