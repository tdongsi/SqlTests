<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/SqlTests/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/SqlTests/"/>
  <updated>2018-06-22T17:08:23-07:00</updated>
  <id>http://tdongsi.github.io/SqlTests/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Data Structure: Trie]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2013/05/14/trie-data-structure/"/>
    <updated>2013-05-14T19:10:03-07:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2013/05/14/trie-data-structure</id>
    <content type="html"><![CDATA[<p>TODO: Trie section in GTG&rsquo;s chapter 13.</p>

<!--more-->


<h3>Basic implementation</h3>

<pre><code class="python Trie data structure">class TrieNode():
    __slots__ = 'children', 'word_end', 'size'

    def __init__(self):
        self.children = {}
        self.word_end = False
        self.size = 0


class Trie():

    def __init__(self):
        self._root = TrieNode()

    def insert(self, word):
        current = self._root

        for c in word:
            current.size += 1
            node = current.children.get(c)
            if node is None:
                node = TrieNode()
                current.children[c] = node

            current = node

        # Mark the last one as end of word
        current.size += 1
        current.word_end = True

    def search(self, word):
        """Check if the given word is present"""
        current = self._root

        for c in word:
            node = current.children.get(c)
            if node is None:
                return False
            current = node

        return current.word_end

    def search_partial(self, prefix):
        """Count the number of contacts starting with prefix."""
        current = self._root

        for c in prefix:
            node = current.children.get(c)
            if node is None:
                return 0
            current = node

        return current.size

    def delete(self, word):
        self._delete(self._root, word, 0)

    def _delete(self, current: TrieNode, word: str, idx: int):
        """Return True if parent node should delete the mapping."""
        if idx == len(word):
            if not current.word_end:
                return False

            current.word_end = False
            return len(current.children) == 0

        c = word[idx]
        node = current.children.get(c)
        if node is None:
            return False

        shouldDelete = self._delete(node, word, idx+1)

        if shouldDelete:
            del current.children[c]
            return len(current.children) == 0

        return False

    def list(self):
        return list(self._list(self._root, ""))

    def _list(self, current: TrieNode, prefix: str):
        if current.word_end:
            # print(prefix)
            yield prefix
        else:
            for k in current.children:
                yield from self._list(current.children[k], prefix + k)
</code></pre>

<h3>References</h3>

<ul>
<li><a href="https://github.com/tdongsi/gtg/blob/develop/chapter13/string.py">My Python code</a>.</li>
<li><a href="https://web.archive.org/web/20170307224715/http://googleyasheck.com/fun-with-tries/">Alternative implementation</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Index]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2011/01/02/language-index/"/>
    <updated>2011-01-02T09:07:55-08:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2011/01/02/language-index</id>
    <content type="html"><![CDATA[<p>Overview of most common languages.</p>

<h3><a href="https://tdongsi.github.io/java/">Java</a></h3>

<h4>Pure Java</h4>

<p>Questions:</p>

<ol>
<li>What is OOP? What is polymorphism? etc.</li>
<li>Some standard design patterns in Java: Singleton (enum and two locks), Builder, Decorator, Factory.</li>
<li>Examples of design patterns in Java.</li>
<li>Relations between <code>hashCode()</code> and <code>equals()</code>.</li>
<li>Implements a simple algorithm for <code>hashCode()</code>.</li>
<li>When to use <code>finalize()</code> and when not to use <code>finalize()</code>. See &ldquo;Effective Java&rdquo;.</li>
<li>Java concurrency: what is <code>volatile</code>? when to use it? <code>synchronized</code>?</li>
<li>Some legacy items: Diff between StringBuilder vs StringBuffer.</li>
</ol>


<h4>Groovy</h4>

<h4>Tools and Ecosystem</h4>

<h3><a href="https://tdongsi.github.io/python/">Python</a></h3>

<ul>
<li><a href="https://docs.python.org/3/whatsnew/3.0.html">What&rsquo;s new in Python 3</a>

<ul>
<li>Essential: Maybe only Python 2 is supported in interviews while you&rsquo;ve been using Python 3 or vice versa. Learn this to unblock yourself.</li>
<li>Bonus points to explain that to interviewers.</li>
</ul>
</li>
</ul>


<p>Warm-up question 1: Write a function that reads file numbers.txt and outputs numbers-mult.txt where each number in numbers.txt is multiplied by its line number, starting from 1.</p>

<pre><code class="python Warm up exercise">def mult_file(INFILE='numbers.txt', OUTFILE='numbers-mult.txt'):
    try:
        with open(INFILE, 'r') as infile, open(OUTFILE, 'w') as outfile:
            for count, line in enumerate(infile, 1):
                line.strip()
                if line:
                    out = count * int(line)
                    outfile.write("%d\n" % out)
    except IOError as e:
        print("Can't open files %s" % e)
</code></pre>

<p>This is a good warm-up exercise for Python since it touches many common operations in Python: reading from/writing to files, string to int.
It is aslo not trivial to write Pythonic code for it.</p>

<p>Warm-up question 2: You are given a search string and a magazine.
You seek to generate all the characters in search string by cutting them out from the magazine.
Give an algorithm to efficiently determine whether the magazine contains all the letters in the search string.</p>

<pre><code class="python Text from magazine">def create_text_from_magazine(text, magazine):
    """ Create search string from magazines.
    :param text: Text you want to generate.
    :param magazine: Where you get characters from.
    :return: True or False
    """
    from collections import Counter

    text_count = Counter(text.strip().lower())
    del text_count[' ']  # We don't care about spaces

    lines = magazine.split("\n")
    for line in lines:
        mag_count = Counter(line.strip().lower())
        text_count -= mag_count
        # print(text_count)
        if not text_count:
            return True

    return False
</code></pre>

<p>Question 3: Define abstract class in Python.</p>

<pre><code class="python Abstract class">from abc import ABCMeta, abstractmethod

class Sequence(metaclass=ABCMeta):
    """Simulate collections.Sequence"""

    @abstractmethod
    def __len__(self):
        """Return the length of the sequence"""

    @abstractmethod
    def __getitem__(self, j):
        """Return the element at index j"""

    def __contains__(self, item):
        """Concrete behavior based on abstract methods"""
        for j in range(len(self)):
            if self[j] == item:
                return True

        return False
</code></pre>

<p>Question 4: Write a generator that returns factors of an integer.</p>

<pre><code class="python Generator">def factors(n):
    """ Generator of factors for n
    """
    if n &lt; 1:
        raise ValueError("n must be larger than 0")

    k = 1
    while k*k &lt; n:
        a, b = divmod(n, k)

        if b == 0:
            yield k
            yield a

        k += 1

    if k*k == n:
        yield k
</code></pre>

<h3><a href="https://tdongsi.github.io/javascript/">JavaScript</a></h3>

<h3>Next language?</h3>

<ul>
<li>Golang</li>
<li>Ruby</li>
</ul>


<!--more-->


<h3>Java Answers</h3>

<ol>
<li>Know your audience.
A new grad will mention something about abstraction, polymorphism, inheritance, encapsulation (A PIE) and pass.
Alan Kay (father of OOP) will say something about message passing and late binding and might fail.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Test-Driven Development]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2011/01/01/tutorial-test-driven-development/"/>
    <updated>2011-01-01T21:57:00-08:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2011/01/01/tutorial-test-driven-development</id>
    <content type="html"><![CDATA[<!-- Reference:
Evernote: "QE cheat sheet"
-->


<p>Test-driven development has become more and more important.
As pointed out in <a href="/syllabus/">this</a>, candidates with 3+ years of industry experience should be able to demonstrate testing experience.
You should expect testing questions come up, even when you interview for developer positions.</p>

<!--more-->


<h3>Type of tests</h3>

<p>This is useful for the open questions of &ldquo;How do you test X?&rdquo; type.
X can be anything that are not related to software.
It would be awesome if you can come up with a creative test case that interviewers won&rsquo;t think of.
However, you are usually expected to hit broadly and methodically different categories of tests, instead of keeping listing different test cases of a test category.
Knowing these kind of tests can also help you keep talking without running out of ideas.</p>

<ul>
<li>Unit testing</li>
<li>Integration testing</li>
<li>Functional testing</li>
<li>Load testing</li>
<li>Stress testing</li>
<li>Performance testing</li>
<li>Install/Uninstall testing</li>
<li>UI testing</li>
<li>Localization testing (language, market-ready)</li>
<li>Security testing</li>
<li>Acceptance testing</li>
<li>Regression testing</li>
</ul>


<p>Other general types:</p>

<ul>
<li>White-box testing</li>
<li>Black-box testing</li>
<li>Beta testing</li>
</ul>


<p>Questions that I will ask myself if I am the interviewer.</p>

<ul>
<li>Does the candidate ask good questions to understand the feature or he/she just simply making assumptions?</li>
<li>Is the candidate covering negative and boundary conditions?</li>
<li>Is the candidate trying to break the feature? Any interesting test cases you haven’t thought of?</li>
<li>Is the candidate covering non-functional tests such as performance, scalability, security, etc.?</li>
</ul>


<p>Make sure that you pass all those minimum expections: ask clarifying questions and highlight assumptions.</p>

<h3>Example of a testing question</h3>

<p>For example, the interviewer will give you a question: &ldquo;Given a string, reverse it word by word&rdquo;.
You proceed to solve it and write it on the whiteboard.
The follow-up question would be &ldquo;How would you test it?&rdquo;.</p>

<p>(1) General</p>

<ul>
<li>&ldquo;Hello World&rdquo; => &ldquo;World Hello&rdquo;</li>
<li>&ldquo;Foo Bar Baz&rdquo; => &ldquo;Baz Bar Foo&rdquo;</li>
<li>What happens with unicode?</li>
<li>What about tabs and newlines? Do newlines end up in the beginning or end?</li>
<li>What about unicode whitespace?</li>
<li>What about numbers? What about special characters like ! and #.</li>
</ul>


<p>(2) Boundary</p>

<ul>
<li>Null string: null => what happens?</li>
<li>Empty string: &ldquo;&rdquo; => &ldquo;&rdquo;</li>
<li>Really long string => What happens?</li>
<li>What about a one really really long word?</li>
<li>What if you just give a string of spaces <code>"     "</code> => <code>"     "</code>?</li>
<li>What if you give a really string of letters separated by spaces? <code>"a a a a a a a a a a a a a a a a a a aa a"</code></li>
<li>Does it handle Chinese well?</li>
<li>What if there&rsquo;s multiple spaces? Are they respected? <code>"a a a b ob"</code></li>
</ul>


<p>(3) Exceptional</p>

<ul>
<li>What happens when you give a really long string (like from <code>/dev/random</code>)?</li>
<li>How can the function run out of memory?</li>
<li>What if the type is incorrect? Could happen in Python.</li>
<li>null => depends on specification. Might not be possible in languages like Haskell.</li>
</ul>


<p>Four and five are bonus stuff that I like to cover or have been asked of me in the past.
They generally aren&rsquo;t the first three that I think of when I&rsquo;m asked to test a function though.</p>

<p>(4) Performance - Running time</p>

<p>I would explain the space complexity I expect out of my solution.
I would draw a simple graph of what it would probably look like.
I would then provide a set of sample points that I would take to see the space complexity.
Some sample points I would take are 0, 1, 5, 10, <code>100</code>, <code>1,000</code>, <code>10,000</code>, <code>100,000</code>, <code>1,000,000</code> until I hit some barrier and then draw more fine grain values in between.
Basically, I&rsquo;d increase the input exponentially and then increase granularity from there.</p>

<p>(5) Performancce - Space complexity</p>

<p>Very similar to (4), I would explain the space complexity I expect out of my solution.
I would draw a simple graph of what it would probably look like.
I would then provide a set of sample points that I would take to see the space complexity.
Personally, I would mention that many languages like Java allow you to run at a reduced heap size like 4 MB so that you can hit <code>OutOfMemory</code> exceptions very quickly with reasonably sized inputs, if the complexity isn&rsquo;t managed properly.</p>
]]></content>
  </entry>
  
</feed>
