<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Questions | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/SqlTests/blog/categories/questions/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/SqlTests/"/>
  <updated>2017-04-29T23:56:48-07:00</updated>
  <id>http://tdongsi.github.io/SqlTests/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Network Question Bank]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2016/09/01/network-question-bank/"/>
    <updated>2016-09-01T01:45:07-07:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2016/09/01/network-question-bank</id>
    <content type="html"><![CDATA[<p>Brush up on networking theory, including familiarity with major components of the IP suite.</p>

<!--more-->


<h3>Questions</h3>

<ol>
<li>TCP/UDP and how they&rsquo;re used.</li>
<li>Difference between IPv4 &amp; IPv6.</li>
<li>How DNS works.</li>
<li>HTTP and it&rsquo;s various versions.</li>
<li>Basic understanding of SSL/TLS.</li>
<li>Other application protocols (FTP, IMAP, SSH etc.)</li>
<li>What is REST and how it&rsquo;s used.</li>
</ol>


<p>On the practical side, make sure you&rsquo;re very comfortable with the networking stack of your language or framework of choice.</p>

<ol>
<li>Make calls to an external web service.</li>
<li>Handle errors and different response codes.</li>
<li>Be able to serialize/deserialize data.</li>
<li>Know async concepts.</li>
<li>Accept user inputs and handle XSS attacks.</li>
<li>Web - how do you keep information in a web application - cookie vs session</li>
<li>What is GET and POST - differences</li>
<li>Difference between PUT and POST.</li>
</ol>


<h3>Answers</h3>

<h4>Section A</h4>

<p>(1) See more <a href="http://www.howtogeek.com/190014/htg-explains-what-is-the-difference-between-tcp-and-udp/">here</a>.
Both TCP and UDP are protocols used for sending packets over Internet.
Built on top of Internet Protocol (IP). The packets are sent to an IP address.</p>

<p>TCP: Transmission Control Protocol</p>

<ol>
<li>Two ways: the remote system sends packets back to acknowledge it’s received your packets.</li>
<li>TCP guarantees the recipient will receive the packets in order by numbering them.</li>
<li>TCP is about reliability: if ACK is not received, the sender will send packets again.</li>
<li>Example usage: file download, web.</li>
</ol>


<p>UDP: User Datagram Protocol</p>

<ol>
<li>Just send the packets to receiver. No waiting for ACK.</li>
<li>No guarantee: if receivers don’t receive it, too bad.</li>
<li>No error checking for better performance.</li>
<li>Example usage: game, live video stream.</li>
</ol>


<h4>Section B</h4>

<p>(3) See more <a href="http://stackoverflow.com/questions/107390/whats-the-difference-between-a-post-and-a-put-http-request">here</a>.</p>

<p>PUT is idempotent: multiple PUT requests will have the same effect. POST is not.
To give examples of REST-style resources:
&ldquo;POST /books&rdquo; with a bunch of book information might create a new book, and respond with the new URL identifying that book: &ldquo;/books/5&rdquo;.
&ldquo;PUT /books/5&rdquo; would have to either create a new book with the id of 5, or replace the existing book with ID 5.</p>

<p>In non-resource style, POST can be used for just about anything that has a side effect. One other difference is that PUT should be idempotent - multiple PUTs of the same data to the same URL should be fine, wheras multiple POSTs might create multiple objects or whatever it is your POST action does.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Question Bank]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2016/08/03/database-question-bank/"/>
    <updated>2016-08-03T01:41:54-07:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2016/08/03/database-question-bank</id>
    <content type="html"><![CDATA[<p>Questions about database in general. For data warehouse and dimensional modelling, check <a href="/blog/2016/09/15/tutorial-dimensional-modelling/">this</a>.</p>

<!--more-->


<h3>Relational Database topics</h3>

<p>Basics</p>

<ul>
<li>SELECTing columns from a table</li>
<li>Aggregates Part 1: COUNT, SUM, MAX/MIN</li>
<li>Aggregates Part 2: DISTINCT, GROUP BY, HAVING</li>
</ul>


<p>Intermediate</p>

<ul>
<li>JOINs, ANSI-89 and ANSI-92 syntax</li>
<li>UNION vs UNION ALL</li>
<li>NULL handling: COALESCE &amp; Native NULL handling</li>
<li>Subqueries: IN, EXISTS, and inline views</li>
<li>Subqueries: Correlated</li>
<li>WITH syntax: Subquery Factoring/CTE</li>
<li>Views</li>
</ul>


<p>Advanced Topics</p>

<ul>
<li>Functions, Stored Procedures, Packages</li>
<li>Pivoting data: CASE &amp; PIVOT syntax</li>
<li>Hierarchical Queries</li>
<li>Cursors: Implicit and Explicit</li>
<li>Triggers</li>
<li>Dynamic SQL</li>
<li>Materialized Views</li>
<li>Query Optimization: Indexes</li>
<li>Query Optimization: Explain Plans</li>
<li>Query Optimization: Profiling</li>
<li>Data Modelling: Normal Forms, 1 through 3</li>
<li>Data Modelling: Primary &amp; Foreign Keys</li>
<li>Data Modelling: Table Constraints</li>
<li>Data Modelling: Link/Corrollary Tables</li>
<li>Full Text Searching</li>
<li>XML</li>
<li>Isolation Levels</li>
<li>Entity Relationship Diagrams (ERDs), Logical and Physical</li>
<li>Transactions: COMMIT, ROLLBACK, Error Handling</li>
</ul>


<h4>References</h4>

<ul>
<li><a href="http://stackoverflow.com/questions/2119859/questions-every-good-database-sql-developer-should-be-able-to-answer">http://stackoverflow.com/questions/2119859/questions-every-good-database-sql-developer-should-be-able-to-answer</a></li>
<li><a href="http://www.careercup.com/page?pid=database-interview-questions">http://www.careercup.com/page?pid=database-interview-questions</a></li>
</ul>


<h3>Questions</h3>

<p>(1) Given these two databases:</p>

<pre><code class="plain Given databases">id name id name 
-- ---- -- ---- 
1 Pirate 1 Rutabaga 
2 Monkey 2 Pirate 
3 Ninja 3 Darth Vader 
4 Spaghetti 4 Ninja
</code></pre>

<p>Explain the following JOINs:</p>

<ol>
<li>INNER JOIN</li>
<li>LEFT and RIGHT OUTER JOIN</li>
<li>FULL JOIN</li>
<li>CROSS JOIN</li>
</ol>


<p>B set:</p>

<ol>
<li>What is normalization and why is it important?</li>
<li>What are some situations where you would de-normalize data?</li>
<li>What is a transaction and why is it important?</li>
<li>What is referential integrity and why is it important?</li>
<li>What steps would to take to investigate reports of slow database performance?</li>
<li>What is an index and how does it help your database?</li>
<li>If someone were to make the claim that: &ldquo;every SELECT always include DISTINCT&rdquo;; how would you comment on the claim?
OLTP and OLAP points of view?</li>
</ol>


<h3>Answer keys</h3>

<h4>Section A</h4>

<p>(1) <a href="http://www.codinghorror.com/blog/2007/10/a-visual-explanation-of-sql-joins.html">http://www.codinghorror.com/blog/2007/10/a-visual-explanation-of-sql-joins.html</a></p>

<h4>Section B</h4>

<p>(1) Normalizing: remove redundancy -> remove update and delete anomaly -> more efficient data storage and consistent data.</p>

<p>Summary from Introduction to Databases
To reduce redundancy. From redundancy, it will lead to update and delete anomaly.
E.g.: dim_company: region/country info will be repeated -> redundancy.
E.g.: North Korea and South Korea merged into Korea -> delete those regions will delete companies -> delete anomaly.</p>

<p>Popular normal forms:</p>

<p>BCNF: For each functional dependency A-> B, A is key.
Functional dependency: A -> B: same A leads to same B. E.g.: ID -> name.</p>

<p>4NF: Functional dependency + Multivalued dependency.
Multivalued dependency: A ->> B, C: each A lead to all combo (B x C). E.g.: ID -> region x language
4NF: For each multivalued dependency A ->> B, C, A is key. I.e.: (A, B, C) is decomposed to (A, B) and (A, C).</p>

<p>(2) When there is no data update or deletion. For example: data warehouse situations.
Analytical processing: joining multiple tables is not efficient. The SQL queries are hard to write.</p>

<p>(3)Why is transaction is important:</p>

<ul>
<li>Concurrency: Ensure consistent data read/write while providing concurrent data access.</li>
<li>Failure-tolerance: Resilience to system failures.</li>
</ul>


<p>A transaction is a sequence of SQL statements treated as a unit. The effect of a transaction is either full or none at all.
Transactions appear to run in isolation.</p>

<p>ACID: atomic, consistency, isolation, durability</p>

<p>(4) You have a foreign key, reference to another table.
When that key is deleted from the other table, referential integrity is compromised.</p>

<p>(5) Check current state: hang processes, long running queries.
Optimize SQL queries.
Indexes.</p>

<p>(6) What is it: persistent data structure, stored in database.
Purpose: improve data lookup performance.
Instead of scanning a whole relational table for a record, using the index, the location of a record can be returned almost immediately.
Implementation: Balanced trees (B tree, B+ tree), Hash Map (for equality condition only)</p>

<p>A database index is a data structure that improves the speed of data retrieval operations on a database table at the cost of additional writes and storage space to maintain the index data structure.
An index is a copy of select columns of data from a table that can be searched very efficiently that also includes a low-level disk block address or direct link to the complete row of data it was copied from.</p>

<p>(7) OLTP: Suppose your query is correct, and does not return any duplicates, then including DISTINCT simply forces the RDBMS to check your result (zero benefit, and a lot of additional processing).
Suppose your query is incorrect, and does return duplicates, then including DISTINCT simply hides the problem (again with additional processing).
It would be better to spot the problem and fix your query.
It&rsquo;ll run faster that way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Questions: SQL Basics]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2016/08/02/select-basics/"/>
    <updated>2016-08-02T01:39:37-07:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2016/08/02/select-basics</id>
    <content type="html"><![CDATA[<p>This post is about basic DDL, <code>SELECT</code> questions (phone-screen level).</p>

<!--more-->


<h3>Questions</h3>

<pre><code class="plain Given Department schema for Questions 1-3">employees                             projects
+---------------+---------+           +---------------+---------+
| id            | int     |&lt;----+  +-&gt;| id            | int     |
| first_name    | varchar |     |  |  | title         | varchar |
| last_name     | varchar |     |  |  | start_date    | date    |
| salary        | int     |     |  |  | end_date      | date    |
| department_id | int     |--+  |  |  | budget        | int     |
+---------------+---------+  |  |  |  +---------------+---------+
                             |  |  |
departments                  |  |  |  employees_projects
+---------------+---------+  |  |  |  +---------------+---------+
| id            | int     |&lt;-+  |  +--| project_id    | int     |
| name          | varchar |     +-----| employee_id   | int     |
+---------------+---------+           +---------------+---------+
</code></pre>

<h4>Question 1</h4>

<pre><code class="plain Question 1">Write a query to list the departments that have a total combined salary greater than $40,000.

Expected Output:
+-------------+----------------+
| name        | combined_salary|
+-------------+----------------+
| Engineering |        130000  |
| Marketing   |         50000  |
+-------------+----------------+
</code></pre>

<h4>Question 2</h4>

<pre><code class="plain Question 2">List the current projects and employees assigned to them.

Output:
+------------+-----------+--------------------------+
| first_name | last_name | title                    |
+------------+-----------+--------------------------+
| John       | Smith     | Update TPS Reports       |
| Ava        | Muffinson | Design 3 New Silly Walks |
| Cailin     | Ninson    | Build a cool site        |
| Mike       | Peterson  | Build a cool site        |
| Ian        | Peterson  | Build a cool site        |
+------------+-----------+--------------------------+
</code></pre>

<h4>Question 3</h4>

<pre><code class="plain Question 3">Who's the highest paid person per department?

Output:
+------------+-----------+-------------+--------+
| first_name | last_name | name        | salary |
+------------+-----------+-------------+--------+
| John       | Smith     | Reporting   |  20000 |
| Ian        | Peterson  | Engineering |  80000 |
| John       | Mills     | Marketing   |  50000 |
| Ava        | Muffinson | Silly Walks |  10000 |
+------------+-----------+-------------+--------+
</code></pre>

<h4>Question 4</h4>

<pre><code class="plain Given fact_sales table">create table fact_sales (
  dateid date not null,
  fruit varchar(10),
  sold int
);

insert into fact_sales
values(STR_TO_DATE('2015-01-01', '%Y-%m-%d'), 'Apple', 31); 
insert into fact_sales
values(STR_TO_DATE('2015-01-01', '%Y-%m-%d'), 'Orange', 19); 
insert into fact_sales
values(STR_TO_DATE('2015-01-02', '%Y-%m-%d'), 'Apple', 37); 
insert into fact_sales
values(STR_TO_DATE('2015-01-02', '%Y-%m-%d'), 'Orange', 26); 
insert into fact_sales
values(STR_TO_DATE('2015-01-03', '%Y-%m-%d'), 'Apple', 21); 
insert into fact_sales
values(STR_TO_DATE('2015-01-03', '%Y-%m-%d'), 'Orange', 23); 
insert into fact_sales
values(STR_TO_DATE('2015-01-04', '%Y-%m-%d'), 'Apple', 35); 
insert into fact_sales
values(STR_TO_DATE('2015-01-04', '%Y-%m-%d'), 'Orange', 27);

fact_sales
+------------+--------+------+
| dateid     | fruit  | sold |
+------------+--------+------+
| 2015-01-01 | Apple  |   31 |
| 2015-01-01 | Orange |   19 |
| 2015-01-02 | Apple  |   37 |
| 2015-01-02 | Orange |   26 |
| 2015-01-03 | Apple  |   21 |
| 2015-01-03 | Orange |   23 |
| 2015-01-04 | Apple  |   35 |
| 2015-01-04 | Orange |   27 |
+------------+--------+------+
</code></pre>

<pre><code class="plain Question 4">What is the difference between Apples and Oranges sold each day?

Output:
+------------+------+
| dateid     | sold |
+------------+------+
| 2015-01-01 |   12 |
| 2015-01-02 |   11 |
| 2015-01-03 |   -2 |
| 2015-01-04 |    8 |
+------------+------+
</code></pre>

<h4>Question 5</h4>

<pre><code class="plain Given schema">fct_request
+------------+------------+---------------+
| dateid     | sender_uid | recipient_uid |
+------------+------------+---------------+
| 2015-01-01 |          1 |             2 |
| 2015-01-01 |          1 |             4 |
| 2015-01-02 |          3 |             1 |
| 2015-01-03 |          4 |             5 |
+------------+------------+---------------+

fct_accept
+------------+--------------+------------+
| dateid     | accepter_uid | sender_uid |
+------------+--------------+------------+
| 2015-01-01 |            2 |          1 |
| 2015-01-02 |            4 |          1 |
| 2015-01-02 |            1 |          3 |
+------------+--------------+------------+

Rules:
1. You can only send a friend request to a person one time.
2. You cannot send a friend request to someone who has already sent you a friend request.
</code></pre>

<pre><code class="plain Question 5">What percent of friend requests are accepted?
Data might be not perfect.
</code></pre>

<h4>Question 6</h4>

<p>Create DDL (table and foreign keys) for several tables in a provided ERD.
ERD contains at least one many to many relationship.
For example: Player(personID, school) and Team(teamID, name).
Player and Team will have a many to many relationship.</p>

<h4>Question 7</h4>

<p>This question is a bit advanced.</p>

<p>You have a table where you have <code>date</code>, <code>user_id</code>, <code>song_id</code> and <code>count</code>.
It shows at the end of each day how many times in her history a user has listened to a given song.
So count is cumulative sum.
You have to update this on a daily basis based on a second table that records in real time when a user listens to a given song.
Basically, at the end of each day, you go to this second table and pull a count of each user/song combination and then add this count to the first table that has the lifetime count.
If it is the first time a user has listened to a given song, you won&rsquo;t have this pair in the lifetime table, so you have to create the pair there and then add the count of the last day.</p>

<p>For simplicity, assume the tables are fact_event: (date, user_id, song_id) and snapshot: (date, user_id, song_id, count).</p>

<h3>Answers</h3>

<h4>Question 1</h4>

<p>The sandbox uses MySQL which does not support WITH clause.
See more MySQL workaround in <a href="/blog/2016/08/28/mysql-workaround/">here</a>.</p>

<pre><code class="sql Answer 1">WITH dept_total AS (
select department_id, sum(salary) as total
from employees
group by department_id
having total &gt; 40000
)
select d.name, t.total
from dept_total t
join deparments d on t.department_id = d.id
</code></pre>

<pre><code class="sql MySQL Answer 1">select d.name, t.total
from (
  select department_id, sum(salary) as total
from employees
group by department_id
having total &gt; 40000
  ) t
  join departments d ON t.department_id = d.id
</code></pre>

<h4>Question 2</h4>

<pre><code class="sql Answer 2">select e.first_name, e.last_name, p.title
from employees_projects ep
join employees e on ep.employee_id = e.id
join projects p on ep.project_id = p.id;
</code></pre>

<h4>Question 3</h4>

<p>Again, the sandbox is MySQL and <code>dense_rank</code> is not available.</p>

<pre><code class="sql Answer 3">select e.first_name, e.last_name, d.name, e.salary
FROM employees e
JOIN departments d on e.department_id = d.id
WHERE (e.department_id, e.salary) in
(
select department_id, max(salary) AS salary
from employees
group by department_id
)
</code></pre>

<h4>Question 4</h4>

<p>You can self-join the table to get the following answer.</p>

<pre><code class="sql Naive answer">select orange.dateid, apple.sold - orange.sold
from fact_sales orange
join fact_sales apple on orange.dateid = apple.dateid
and orange.fruit = 'Orange' and apple.fruit = 'Apple';
</code></pre>

<p>However, recall that in dimensional modeling, fact tables usually have huge number of rows.
Therefore, the expected answer should avoid joining such a huge table.</p>

<pre><code class="sql Expected answer">select dateid, sum(mod_sold)
from (
select dateid, case when fruit = 'Apple'  then sold else -sold end as mod_sold
from fact_sales
) t
group by dateid;
</code></pre>

<h4>Question 5</h4>

<pre><code class="sql Answer 5">select count(requested), sum(accepted)
FROM (
select r.sender_uid as requested, CASE when a.sender_uid is null then 0 else 1 end as accepted
from fct_request r
left join fct_accept a on r.sender_uid = a.sender_uid and r.recipient_uid = a.accepter_uid
) t
</code></pre>

<h4>Question 6</h4>

<p>You should create a <code>teamPlayer</code> table with foreign keys to <code>Team</code> and <code>Player</code> tables as primary key.
You are expected to write the following DDL statements.</p>

<pre><code class="sql DDL for teamPlayer">CREATE TABLE teamPlayer
(
playerID INT NOT NULL, 
teamID INT NOT NULL,
PRIMARY KEY(playerID, teamID)
);

alter table teamPlayer
add constraint 
  fk_teamPlayer__Player foreign key(playerID) references Player(personID);

alter table teamPlayer
add constraint 
  fk_teamPlayer__Team foreign key(teamID) references Team(teamID);
</code></pre>

<h4>Question 7</h4>

<p><strong>Scenario 1</strong>: Overwrite the snapshot. Date column in snapshot is the last modified date.</p>

<pre><code>create temporary table temp
AS
(select user_id, song_id, count(*)
from fact_event
where date &gt; (select max(date) from snapshot)
group by user_id, song_id
);

UPDATE snapshot as s
SET date = current_date, s.count = s.count + t.count
FROM temp t
WHERE s.user_id = t.user_id AND s.song_id = t.song_id;

--- (MySQL: UPDATE might be different)

INSERT snapshot (date, user_id, song_id, count)
SELECT current_date, user_id, song_id, count
from temp
where (user_id, song_id) not in (select user_id, song_id from snapshot) x;
</code></pre>

<p><strong>Scenario 2</strong>: Append new snapshot for each date.</p>

<pre><code class="sql">create temporary table temp
AS
(select user_id, song_id, count(*)
from fact_event
where date &gt; (select max(date) from snapshot)
group by user_id, song_id
);

insert into snapshot (date, user_id, song_id, count)
select current_date, t.user_id, t.song_id, t.count + coalesce(s.count, 0)
from temp t
join snapshot s on t.user_id = s.user_id and t.song_id = s.song_id and s.date = current_date-1;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: MySQL Workarounds]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2016/08/01/mysql-workaround/"/>
    <updated>2016-08-01T01:42:23-07:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2016/08/01/mysql-workaround</id>
    <content type="html"><![CDATA[<p>MySQL has traditionally lagged behind in support for the SQL standard.
Unfortunately, from my experience, MySQL is often used as the sandbox for SQL code challenges and interviews.
If you are used to work with Vertica SQL, writing SQL statements in MySQL can be challenging exercises, NOT necessarily in a good way, because many useful features are not supported.</p>

<!--more-->


<h3>Summary</h3>

<p>In this post, the following interview questions will be presented and, then, potential pitfalls and answers in MySQL will be explained:</p>

<ol>
<li><a href="https://leetcode.com/problems/department-top-three-salaries/">Question</a>: Write a SQL query to find employees who earn the top three salaries in each of the department.</li>
<li><a href="https://leetcode.com/problems/nth-highest-salary/">Question</a>: Write a function that return the given <code>n</code>-th highest salary.</li>
<li><a href="https://leetcode.com/problems/rank-scores/">Question</a>: Write a SQL query to rank scores (dense_rank).</li>
<li><a href="https://leetcode.com/problems/delete-duplicate-emails/">Question</a>: Write a SQL query to delete all duplicate email entries in a table named <code>Person</code>, keeping only unique emails based on its smallest Id.</li>
</ol>


<h3>WITH clause</h3>

<p>Use <a href="http://tdongsi.github.io/blog/2016/08/17/analytic-functions-in-mysql/">nested subqueries</a>.</p>

<p><a href="https://leetcode.com/problems/department-top-three-salaries/">Question</a>:
Write a SQL query to find employees who earn the top three salaries in each of the department.</p>

<pre><code class="sql What you might come up">WITH temp AS (
select Name, Salary, DepartmentId
rank() OVER (partition by DepartmentId ORDER BY salary DESC) as rank
)
select d.Name as Department, e.Name as Name, e.Salary as Salary
from temp e
join Department d on e.DepartmentId = d.Id
where t.rank &lt;= 3
</code></pre>

<p>Answer: based on <a href="http://stackoverflow.com/questions/17084123/mysql-query-to-get-the-top-two-salary-from-each-department%0AFor%20ideas%20to%20arrive%20at%20the%20solution">this</a>.</p>

<pre><code class="sql What actually works">select d.Name as Department, e.Name as Employee, e.Salary as Salary
from Employee e
join Department d on e.DepartmentId = d.Id
where (
select count(distinct(e2.salary))
from Employee e2
where e.DepartmentId = e2.DepartmentId and e2.salary &gt; e.salary
) in (0,1,2)
order by Department, Salary desc
</code></pre>

<p>Using the similar idea, one can answer this <a href="https://leetcode.com/problems/nth-highest-salary/">question</a>:
write a function that return the given <code>n</code>-th highest salary. The solution (without using <code>DENSE_RANK</code>) is:</p>

<pre><code class="sql What actually works">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
  RETURN (
      -- Write your MySQL query statement below.
      SELECT MAX(Salary)
            FROM Employee Emp1
            WHERE (N-1) = (
                 SELECT COUNT(DISTINCT(Emp2.Salary))
                        FROM Employee Emp2
                        WHERE Emp2.Salary &gt; Emp1.Salary)
  );
END
</code></pre>

<h3>Analytic functions <code>ROW_NUMBER</code>, <code>RANK</code>, and <code>DENSE_RANK</code></h3>

<p>Summary from <a href="http://tdongsi.github.io/blog/2016/08/17/analytic-functions-in-mysql/">here</a>.</p>

<pre><code class="sql ROW_NUMBER, RANK, and DENSE_RANK functions in MySQL">-- In Vertica
SELECT
ROW_NUMBER () OVER (PARTITION BY col_1, col_2 ORDER BY col_3 DESC) AS row_number,
RANK () OVER (PARTITION BY col_1, col_2 ORDER BY col_3 DESC) AS rank,
DENSE_RANK () OVER (PARTITION BY col_1, col_2 ORDER BY col_3 DESC) AS dense_rank,
t.*
FROM table_1 t

-- In MySQL
SELECT
@row_num:=IF(@prev_col_1=t.col_1 AND @prev_col_2=t.col_2, @row_num+1, 1) AS row_number,
@rank:=IF(@prev_col_1=t.col_1 AND @prev_col_2=t.col_2 AND @prev_col_3=col_3, @rank, @row_num) AS rank,
@dense:=IF(@prev_col_1=t.col_1 AND @prev_col_2=t.col_2, IF(@prev_col_3=col_3, @dense, @dense+1), 1) AS dense_rank,
@prev_col_1 = t.col_1,
@prev_col_2 = t.col_2,
@prev_col_3 = t.col_3,
t.*
FROM (SELECT * FROM table_1 ORDER BY col_1, col_2, col_3 DESC) t,
     (SELECT @row_num:=1, @dense:=1, @rank:=1, @prev_col_1:=NULL, @prev_col_2:=NULL, @prev_col_3:=NULL) var
</code></pre>

<p>In the following <a href="https://leetcode.com/problems/rank-scores/">question</a>, note that the outer SELECT is used to only expose only columns of interest while the main SQL code is enclosed in a subquery:</p>

<pre><code class="sql Solution in Vertica SQL">select Score,
DENSE_RANK() OVER (ORDER BY Score DESC) AS Rank
FROM Scores;
</code></pre>

<pre><code class="sql Solution in MySQL">SELECT Score, Rank FROM
( SELECT t.Score,
@dense:=IF(@prev_col2=t.Score, @dense, @dense+1) AS Rank,
@prev_col2:=t.Score
FROM (SELECT Score FROM Scores ORDER BY Score DESC) t,
(SELECT @dense:=0, @prev_col2:=NULL) var ) x
</code></pre>

<h3>Other tricky questions</h3>

<p><code>DELETE</code> might not work as you think in MySQL.</p>

<p><a href="https://leetcode.com/problems/delete-duplicate-emails/">Question</a>:
Write a SQL query to delete all duplicate email entries in a table named <code>Person</code>, keeping only unique emails based on its smallest Id.</p>

<pre><code class="sql What you might come up">delete from Person
where Id not in (select min(Id) from Person group by Email);
</code></pre>

<p>The above does not work because you need to assign name to the subquery (temporary table).</p>

<pre><code class="sql What actually works">delete from Person
where Id not in
(select * from
(select min(Id) from Person group by Email) x);
</code></pre>

<h3>External links</h3>

<ul>
<li><a href="https://github.com/kamyu104/LeetCode/tree/master/MySQL">Leetcode Database Solutions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[System Design Questions]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2016/07/01/system-design-questions/"/>
    <updated>2016-07-01T02:13:01-07:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2016/07/01/system-design-questions</id>
    <content type="html"><![CDATA[<p>How to practice for System Design questions and some design questions.</p>

<!--more-->


<h3>Readings</h3>

<p>For Web Services, read &ldquo;Architecting in AWS&rdquo;: recognize scalability problems that AWS services trying to address and replace, for example, &ldquo;AWS Load Balancer&rdquo; with generic load balancer.</p>

<p>Read these to know the broad topics that are expected.</p>

<ol>
<li><a href="https://www.quora.com/What-system-design-distributed-systems-+-scalability-topics-should-I-study-in-order-to-adequately-prepared-for-a-Google-Software-Engineer-interview">Quora question</a></li>
<li><a href="https://www.linkedin.com/pulse/technical-design-interview-guide-success-joey-addona">The Technical Design Interview - A Guide to Success</a></li>
<li><a href="https://www.linkedin.com/pulse/test-design-architecture-interview-tips-success-kane-ho">Test Design &amp; Architecture Interview - Tips to success</a></li>
</ol>


<h3>Questions</h3>

<ol>
<li>Design a simple file system using OO programming. Just folder and files.</li>
<li>How to design a load balancer?</li>
<li>How to design Facebook News Feed?</li>
</ol>


<h3>Answers</h3>

<p>(1) Design a simple file system using OO programming. Just folder and files.</p>

<p>Use Composite pattern.</p>

<pre><code class="java">class FileNode {
  String name;
}

class File extends FileNode {
  long size;
}

class Folder extends FileNode {
  Collection&lt;FileNode&gt; children;
}
</code></pre>

<p>(2) How to design a load balancer?</p>

<p>Simple: hash and assign random. What are pros and cons?</p>

<p>(3) Design Facebook News Feed.
From <a href="https://www.reddit.com/r/cscareerquestions/comments/4ytbz3/design_facebook_news_feed_my_solution_to_the/">here</a>:</p>

<p>First some numbers to get the scale of the problem:</p>

<ul>
<li>number of users: 10<sup>9</sup></li>
<li>number of users during a peak hour (upper bound): 10<sup>8</sup></li>
<li>number of posts during a peak hour: 10<sup>6</sup></li>
<li>number of other activities during a peak hour (likes, comments, saves): 10<sup>10</sup></li>
<li>almost all users have less than 10<sup>3</sup> friends</li>
</ul>


<p>The News Feed is constructed mainly based on the activity of user&rsquo;s important Facebook friends.
An important friend is a user who is my friend and I have interacted with him/her at least somewhat during recent months.
Interaction might include liking his/her comment, commenting on their post, chatting together, being marked on the same photo, etc.
We assume the backend maintains the list of important friends.
It might be updated perhaps every 60 minutes.
This ordering might be quite fuzzy.
Random perturbations of this ordering might lead to users being able to rediscover friends who they have mostly stopped interacting with.
The primary purpose of distinguishing important friends is to make the feed more interesting.
Another advantage is reduction of hotspots: there might be people with >10<sup>4</sup> friends, but we assume that every Facebook user has at most 10<sup>2</sup> important friends.</p>

<p><strong>Minimum Viable Product</strong>: The Facebook News Feed of each user is a merge of the recent posts made by all his/her important friends sorted by the score of the post.
The score of the post is ideally proportional to how interesting the post is to our user.
The score depends on: how old the post is (older posts are less interesting), how many likes the post received, how many likes the post received from user&rsquo;s important friends or friends, &hellip;</p>

<p>We primarily care about delivering an interesting News Feed. On the other hand, we don&rsquo;t really care about being able to produce an infinitely long News Feed. If our infrastructure implies that the feed is limited to 10<sup>00</sup> items and the user cannot scroll further. There are very few legitimate uses for having infinitely scrollable feed.</p>

<p>Overview of the infrastructure:</p>

<ul>
<li>Firewall</li>
<li>Load balancer</li>
<li>Front-end web servers</li>
<li>Memcache servers or Redis servers or something similar</li>
<li>Distributed database servers</li>
</ul>


<p>Let&rsquo;s see what happens when the user requests his News Feed:</p>

<ul>
<li>The request is specified by: the id of user whose feed we&rsquo;re displaying and the number N of requested posts.</li>
<li>The load balancer redirects the request to one of the web servers. It also decrypts the request. Within the datacenter, we only use unencrypted connections. To do the above, the load balancer keeps statistics of the numbers of requests each server is handling. Possibly, the load balancer might decide to start up a new server or schedule a shutdown of a server to save power. The web server checks if the user is authenticated. This is done by retrieving user&rsquo;s session data from a Google BigTable. If not logged in, s/he is redirected to the login page. If N is too large and not coming from a verified computer (like Facebook&rsquo;s API server), we reject the request and log information about a suspicious request.</li>
<li>The web server queries memcache for the list of important friends of the user in question.</li>
<li>Almost always, memcache will have this list ready in memory for all users who are currently logged in (after login, we immediately prefetch this data into memcache). The peak number of users is 10<sup>8</sup>, the number of important users at most 10<sup>2</sup>, each user is represented by an 8 byte identifier. This is an upper bound of 10<sup>11</sup> bytes, which is 100 GB of memory. Even with significant overhead, room for growth and a safety factor for situations when an unexpectedly large number of users logs in at the same time (e.g., when presidential election results are announced), this can still be stored in operating memory of a single server. A distributed memcache implementation is not going to have a problem here. For each important friend, the web server sends a request for this friend&rsquo;s Activity List. Activity List is a list of his posts, likes, comments, uploaded photos, instances of being marked on a photo, etc. Each item contains a timestamp (32 bits), item type (post, comment, share, &hellip;), id of the item (e.g., the id of the post or comment), the destination id (for example, the id of the post on which the comment was made) and privacy setting (1 byte). This is 22 bytes in total. Only identifiers are stored. The data are populated at the end of the computation.</li>
<li>These lists are stored in a distributed database hidden behind caching servers. There is 10<sup>9</sup> users, each has at most 10<sup>3</sup> items in their Activity List. This is 22 * 10<sup>12</sup> = 22 TB of memory. <strong> It is certainly possible to store this in a distributed file system. </strong>A distributed memcache on 128 servers each with 250 GB RAM would also handle this. Therefore, we can assume all these lists are almost always in memory.</li>
<li>Each item in each of these lists is assigned Relevancy Value. This depends on: The importance of the friend from whose Activity List the item is. How recent the item is. The number of likes and shares the item has (this only makes sense in the case of posts or photos). The number of likes from the user&rsquo;s other important friends. Surely, a like from 3 of my friends is more important than 10 likes from random strangers. We can access this information since we have retrieved the Activity Lists of every single important friend of the user. Since these lists include their likes and the ids of liked posts, we can specifically compute the numbers from the retrieved data. The user&rsquo;s prefered content type. Some users might like photos more than text. We remember this for each user and adjust the weight accordingly. Private posts that should not be visible to the user are removed at this point.</li>
<li>We sort each of these lists using the Relevancy Value and merge them.</li>
<li>We send this list to a content service. This service replaces all identifiers with the corresponding content (text, image links, names of users instead of user ids, &hellip;)</li>
<li>The web server uses a template to convert this into HTML.</li>
</ul>


<p>There are two questions to ponder:</p>

<ul>
<li>When the News Feed is requested again in the future, do we recalculate it from scratch? We could store the sequence calculated in one of the last steps in cache and only compute the beginning of the feed (that is: we would only compute what is new). This might make almost-infinite scrolling possible in certain cases. However, we would need to handle some corner cases. For example, the list is only approximately ordered according to the timestamp.</li>
<li>The above described the read path. It remains to analyze the write path: what happens when a user submits a content, likes something, etc. Well, we simply add this to his Activity List. In the case of posts, images, &hellip; we also store it on a content service server.</li>
</ul>

]]></content>
  </entry>
  
</feed>
