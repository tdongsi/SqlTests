<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | Personal Interview Notes]]></title>
  <link href="http://tdongsi.github.io/SqlTests/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://tdongsi.github.io/SqlTests/"/>
  <updated>2018-05-29T17:17:47-06:00</updated>
  <id>http://tdongsi.github.io/SqlTests/</id>
  <author>
    <name><![CDATA[Cuong Dong-Si]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Compare Languages: Java vs. C++]]></title>
    <link href="http://tdongsi.github.io/SqlTests/blog/2011/01/11/compare-languages-java-vs-c-plus-plus/"/>
    <updated>2011-01-11T11:11:40-07:00</updated>
    <id>http://tdongsi.github.io/SqlTests/blog/2011/01/11/compare-languages-java-vs-c-plus-plus</id>
    <content type="html"><![CDATA[<p>How to answer the question &ldquo;What is the difference between Java and C++?&rdquo;.
Knowing the subtle difference between similar languages shows mastery of both.</p>

<!--more-->


<h3>Strict differences</h3>

<p>Java</p>

<ol>
<li>Multiple inheritance: by implementing multiple interfaces, only extending one superclass.</li>
<li>Java is reflective, allowing dynamic code generation.</li>
<li>Automatic garbage collection. The concept of destructor and using finalize() is not recommended.</li>
<li>Operator overloading is not possible [2]. Only + overladed for String.</li>
<li>Generic programming: syntactic sugar for backward compatibility (can be removed), just a wrapper for object casting.</li>
</ol>


<p>C++</p>

<ol>
<li>Extending multiple classes are allowed</li>
<li>C++ provides only object types and class name.</li>
<li>Explicit memory allocation and deallocation.</li>
<li>Operator overloading is very common.</li>
<li>Advanced version of preprocessor/macro programming.</li>
</ol>


<h3>Practical differences</h3>

<p>In practice, the patterns of using two languages can be very different.</p>

<p>Java</p>

<ol>
<li>Using Interfaces and Listeners to achieve similar effects.</li>
<li>final has more limited usage.</li>
<li>Label can be used in loops, such as break from nested <code>for</code> loops.</li>
<li>Most libraries are based on class inheritance and object-oriented programming.</li>
</ol>


<p>C++</p>

<ol>
<li>Function pointers, function objects are common.</li>
<li>const keyword has more functions and is more commonly used.</li>
<li>goto statement is supported but not recommended.</li>
<li>Most libraries are based on templates and generic programming.</li>
</ol>


<p>Java Generics are massively different to C++ templates.
Basically in C++ templates are basically a glorified preprocessor/macro set.
Java Generics are basically syntactic sugar (things can be removed from the language, added just to make expressions more clearly)</p>
]]></content>
  </entry>
  
</feed>
